import tkinter as tk
from tkinter import ttk
from tkinter import messagebox, simpledialog, filedialog
import json
import os
from datetime import datetime, timedelta
import calendar


LARGEFONT =("Times New Roman", 35)
SMALLFONT =("Times New Roman", 15)

username = {}

import tkinter as tk
from tkinter import ttk
import json

class tkinterApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title("Your App Name")
        self.geometry("800x600")

        # Initialize empty dictionaries first
        self.username_map = {}
        self.user_data = {}
        self.current_user = None

        # Load data if files exist
        self.load_username_data()
        self.load_user_data()

        # Create the container
        self.container = tk.Frame(self)
        self.container.pack(side="top", fill="both", expand=True)
        self.container.grid_rowconfigure(0, weight=1)
        self.container.grid_columnconfigure(0, weight=1)

        self.frames = {}

        # Initialize all frames
        for F in (CreateAcc, Login, ResetPwd, Homepage, LogHistory, SideEffects):  # Added SideEffects
            frame = F(self.container, self)
            self.frames[F.__name__] = frame 
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("Login")

    def show_frame(self, page_name):
        """Show a frame for the given page name"""
        frame = self.frames[page_name]
        frame.tkraise()
        # Update welcome text if showing Homepage
        if page_name == "Homepage" and hasattr(frame, "update_welcome_text"):
            frame.update_welcome_text()
        # Refresh LogHistory if showing that page
        if page_name == "LogHistory" and hasattr(frame, "refresh_data"):
            frame.refresh_data()
        # Refresh SideEffects if showing that page
        if page_name == "SideEffects" and hasattr(frame, "refresh_data"):
            frame.refresh_data()

    def load_user_data(self):
        try:
            with open("user_data.json", "r") as file:
                data = file.read()
                if data:
                    self.user_data = json.loads(data)
        except (FileNotFoundError, json.JSONDecodeError):
            self.save_user_data()

    def load_username_data(self):
        try:
            with open("username_data.json", "r") as file:
                data = file.read()
                if data:
                    self.username_map = json.loads(data)
        except (FileNotFoundError, json.JSONDecodeError):
            self.save_username_data()

    def save_user_data(self):
        with open("user_data.json", "w") as file:
            json.dump(self.user_data, file)

    def save_username_data(self):
        with open("username_data.json", "w") as file:
            json.dump(self.username_map, file)

    def add_user(self, username, password):
        if username not in self.username_map:
            self.user_data[username] = {
                'password': password,
                'security_questions': []
            }
            self.username_map[username] = password
            self.save_user_data()
            self.save_username_data()
            return True
        return False

    def get_current_user(self):
        return self.current_user

    def set_current_user(self, username):
        self.current_user = username
        

class Login(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        self.configure(width=1000, height=1000)

        welcome = tk.Label(self, text='Welcome', font=('calibre', 30, 'bold'))

        # User input
        self.name_var = tk.StringVar()
        self.passw_var = tk.StringVar()

        # Creating labels and entries
        name_label = tk.Label(self, text='Username', font=('calibre', 10, 'bold'))
        name_entry = tk.Entry(self, textvariable=self.name_var, font=('calibre', 10, 'normal'))

        passw_label = tk.Label(self, text='Password', font=('calibre', 10, 'bold'))
        passw_entry = tk.Entry(self, textvariable=self.passw_var, font=('calibre', 10, 'normal'), show='*')

        # Login button
        sub_btn = tk.Button(self, text='Login', command=self.submit)

        # Placing widgets
        welcome.place(x=400, y=50)
        name_label.place(x=400, y=100)
        name_entry.place(x=400, y=120)
        passw_label.place(x=400, y=150)
        passw_entry.place(x=400, y=170)
        sub_btn.place(x=400, y=250)

        # Navigation buttons
        button1 = tk.Button(self, text="New User?",
                            command=lambda: controller.show_frame("CreateAcc"))
        button1.place(x=200, y=250)

        button2 = tk.Button(self, text="Forgot Password",
                            command=lambda: controller.show_frame("ResetPwd"))
        button2.place(x=600, y=250)

    def submit(self):
        name = self.name_var.get()
        password = self.passw_var.get()

        # Check if the username exists and the password matches
        if name in self.controller.user_data and self.controller.user_data[name]['password'] == password:
            print(f"Login successful for user: {name}")
            self.controller.set_current_user(name)
            self.controller.show_frame("Homepage")
        else:
            print("Invalid username or password")
            messagebox.showerror("Login Error", "Invalid username or password")

        self.name_var.set("")
        self.passw_var.set("")
    
class CreateAcc(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        self.username_var = tk.StringVar()
        self.password_var = tk.StringVar()
        self.confirm_password_var = tk.StringVar()

        # Username
        tk.Label(self, text="Username:").pack(pady=10)
        self.username_entry = tk.Entry(self, textvariable=self.username_var)
        self.username_entry.pack()

        # Password
        tk.Label(self, text="Password:").pack(pady=10)
        self.password_entry = tk.Entry(self, textvariable=self.password_var, show="*")
        self.password_entry.pack()

        # Confirm Password
        tk.Label(self, text="Confirm Password:").pack(pady=10)
        self.confirm_password_entry = tk.Entry(self, textvariable=self.confirm_password_var, show="*")
        self.confirm_password_entry.pack()

        # Create Account Button
        tk.Button(self, text="Create Account", command=self.create_account).pack(pady=20)

        # Back to Login Button
        tk.Button(self, text="Back to Login", command=lambda: controller.show_frame("Login")).pack()

    def create_account(self):
        username = self.username_var.get()
        password = self.password_var.get()
        confirm_password = self.confirm_password_var.get()

        if username and password and confirm_password:
            if password != confirm_password:
                messagebox.showerror("Error", "Passwords do not match")
            elif self.controller.add_user(username, password):
                messagebox.showinfo("Success", "Account created successfully!")
                self.controller.show_frame("Login")  # Navigate back to login page
            else:
                messagebox.showerror("Error", "Username already exists")
        else:
            messagebox.showerror("Error", "All fields must be filled")

        # Clear the entry fields
        self.username_var.set("")
        self.password_var.set("")
        self.confirm_password_var.set("")



        
class ResetPwd(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        # Title label
        label = tk.Label(self, text="Reset Password", font=LARGEFONT)
        label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

        # Password entry fields
        self.password_entry = tk.Entry(self, show="*")
        self.password_entry.grid(row=1, column=1, padx=10, pady=10)
        label1 = tk.Label(self, text="Set password:", font=SMALLFONT)
        label1.grid(row=1, column=0, padx=10, pady=10)

        self.confirm_password_entry = tk.Entry(self, show="*")
        self.confirm_password_entry.grid(row=2, column=1, padx=10, pady=10)
        label2 = tk.Label(self, text="Confirm password:", font=SMALLFONT)
        label2.grid(row=2, column=0, padx=10, pady=10)

        # Error label (hidden by default)
        self.error_label = tk.Label(self, text="Error: passwords do not match", font=SMALLFONT, fg="red")
        self.error_label.grid(row=3, column=0, columnspan=2, padx=10, pady=10)
        self.error_label.grid_remove()  # Hide the error label initially

        # Submit button
        button1 = tk.Button(self, text="Submit", command=self.reset_password)
        button1.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

    def reset_password(self):
        password = self.password_entry.get()
        confirm_password = self.confirm_password_entry.get()

        if password == confirm_password:
            # Passwords match, proceed with reset
            # Here you would typically update the password in your database
            print("Password reset successful")
            self.error_label.grid_remove()  # Hide error message if it was shown
            # You can add code here to update the username map or database
            # Then, switch to the Login frame
            self.controller.show_frame("Login")
        else:
            # Passwords don't match, show error message
            self.error_label.grid()  # Show the error label
        
class Homepage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)  # Changed from super().__init__
        self.controller = controller

        # Welcome text
        welcome_frame = tk.Frame(self)
        welcome_frame.pack(pady=50)

        welcome_text = tk.Label(welcome_frame, 
                              text="Welcome!", 
                              font=("Times New Roman", 30, "bold"))
        welcome_text.pack()

        # Button frame
        button_frame = tk.Frame(self)
        button_frame.pack(expand=True)

        # Button style - removed bg and fg for compatibility
        button_style = {
            'width': 20,
            'height': 2,
            'font': ('Times New Roman', 16),
            'relief': 'raised'
        }

        # Create buttons with explicit pack() calls
        self.medications_btn = tk.Button(
            button_frame, 
            text="Medications",
            command=self.open_medications,
            **button_style
        )
        self.medications_btn.pack(pady=20)

        self.reminders_btn = tk.Button(
            button_frame, 
            text="Reminders",
            command=self.open_reminders,
            **button_style
        )
        self.reminders_btn.pack(pady=20)

        self.log_history_btn = tk.Button(
            button_frame, 
            text="Log & History",
            command=self.open_log_history,
            **button_style
        )
        self.log_history_btn.pack(pady=20)

        # Logout button
        self.logout_btn = tk.Button(
            self, 
            text="Logout",
            command=self.logout,
            font=('Times New Roman', 12),
            width=10
        )
        self.logout_btn.pack(side='bottom', pady=20)

    def open_medications(self):
        medications_window = tk.Toplevel(self)
        medications_window.title("Medications")
        medications_window.geometry("800x600")
        try:
            MedicationTracker(medications_window)
        except Exception as e:
            messagebox.showerror("Error", f"Could not open Medications: {str(e)}")

    def open_reminders(self):
        reminders_window = tk.Toplevel(self)
        reminders_window.title("Reminders")
        reminders_window.geometry("800x600")
        ReminderSystem(reminders_window)

    def open_log_history(self):
        # Simply show the LogHistory frame
        self.controller.show_frame("LogHistory")

    def logout(self):
        if messagebox.askyesno("Logout", "Are you sure you want to logout?"):
            self.controller.set_current_user(None)
            self.controller.show_frame("Login")
            
class MedicationTracker:
    def __init__(self, parent):
        self.parent = parent
        self.medications = {}

        # Create an empty JSON file if it doesn't exist
        if not os.path.exists("medication_data.json"):
            with open("medication_data.json", "w") as f:
                json.dump({}, f)

        # Load existing data
        self.load_data()

        # Main container
        self.main_frame = ttk.Frame(parent)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Header frame
        self.header_frame = ttk.Frame(self.main_frame)
        self.header_frame.pack(fill="x", pady=(0, 20))

        # Back button
        self.back_btn = ttk.Button(
            self.header_frame,
            text="← Back to Dashboard",
            command=self.go_back
        )
        self.back_btn.pack(side="left")

        # Title
        ttk.Label(
            self.header_frame,
            text="Medications",
            font=("Helvetica", 16, "bold")
        ).pack(side="left", padx=20)

        # Search frame
        self.search_frame = ttk.Frame(self.main_frame)
        self.search_frame.pack(fill="x", pady=(0, 20))

        # Search entry
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_medications)
        ttk.Label(
            self.search_frame,
            text="Search: "
        ).pack(side="left")
        self.search_entry = ttk.Entry(
            self.search_frame,
            textvariable=self.search_var
        )
        self.search_entry.pack(side="left", fill="x", expand=True)

        # Add Medication button
        self.add_btn = ttk.Button(
            self.search_frame,
            text="+ Add Medication",
            command=self.show_add_medication
        )
        self.add_btn.pack(side="right", padx=10)

        # Medications list frame
        self.list_frame = ttk.Frame(self.main_frame)
        self.list_frame.pack(fill="both", expand=True)

        # Create headers
        self.create_list_headers()

        # Display medications
        self.update_medications_list()

    def create_list_headers(self):
        # Clear existing headers
        for widget in self.list_frame.grid_slaves():
            widget.destroy()

        headers = ["Medication Name", "Dosage", "When to Take", "Reminders"]
        for i, header in enumerate(headers):
            ttk.Label(
                self.list_frame,
                text=header,
                font=("Helvetica", 11, "bold")
            ).grid(row=0, column=i, padx=5, pady=5, sticky="w")

    def update_medications_list(self):
        # Clear existing items (except headers)
        for widget in self.list_frame.grid_slaves():
            if int(widget.grid_info()["row"]) > 0:
                widget.destroy()

        # Filter medications based on search
        search_term = self.search_var.get().lower()
        filtered_meds = {k: v for k, v in self.medications.items() 
                        if search_term in k.lower()}

        # Display medications
        for i, (med_name, med_info) in enumerate(filtered_meds.items(), 1):
            ttk.Label(
                self.list_frame,
                text=med_name
            ).grid(row=i, column=0, padx=5, pady=2, sticky="w")

            ttk.Label(
                self.list_frame,
                text=med_info.get('dosage', '')
            ).grid(row=i, column=1, padx=5, pady=2, sticky="w")

            ttk.Label(
                self.list_frame,
                text=med_info.get('time', '')
            ).grid(row=i, column=2, padx=5, pady=2, sticky="w")

            reminder_status = "Yes" if med_info.get('reminders_enabled', False) else "No"
            ttk.Label(
                self.list_frame,
                text=reminder_status
            ).grid(row=i, column=3, padx=5, pady=2, sticky="w")

    def add_medication_callback(self, medication_data):
        self.medications[medication_data['name']] = {
            'dosage': medication_data['dosage'],
            'time': medication_data['time'],
            'reminders_enabled': medication_data['reminders_enabled']
        }
        self.save_data()
        self.update_medications_list()

    def show_add_medication(self):
        add_window = tk.Toplevel(self.parent)
        AddMedicationForm(add_window, self.add_medication_callback)

    def filter_medications(self, *args):
        self.update_medications_list()

    def go_back(self):
        self.parent.destroy()

    def save_data(self):
        try:
            with open("medication_data.json", "w") as f:
                json.dump(self.medications, f)
        except Exception as e:
            messagebox.showerror("Error", f"Could not save data: {str(e)}")

    def load_data(self):
        try:
            with open("medication_data.json", "r") as f:
                data = f.read()
                if data:
                    self.medications = json.loads(data)
                else:
                    self.medications = {}
        except (FileNotFoundError, json.JSONDecodeError):
            self.medications = {}
            with open("medication_data.json", "w") as f:
                json.dump({}, f)


class AddMedicationForm:
    def __init__(self, parent, callback):
        self.window = parent
        self.callback = callback

        # Clear any existing widgets in the window
        for widget in self.window.winfo_children():
            widget.destroy()

        # Set window title and size
        self.window.title("Add New Medication")
        self.window.geometry("400x500")

        # Main frame
        self.frame = ttk.Frame(self.window, padding="20")
        self.frame.pack(fill="both", expand=True)

        # Title
        ttk.Label(
            self.frame,
            text="New Medication",
            font=("Helvetica", 16, "bold")
        ).pack(pady=(0, 20))

        # Back button
        self.back_btn = ttk.Button(
            self.frame,
            text="← Back",
            command=self.window.destroy
        )
        self.back_btn.pack(anchor="w", pady=(0, 20))

        # Medication Name
        ttk.Label(self.frame, text="Medication Name:").pack(anchor="w")
        self.name_var = tk.StringVar()
        ttk.Entry(
            self.frame,
            textvariable=self.name_var
        ).pack(fill="x", pady=(0, 10))

        # Dosage
        ttk.Label(self.frame, text="Dosage:").pack(anchor="w")
        self.dosage_var = tk.StringVar()
        ttk.Entry(
            self.frame,
            textvariable=self.dosage_var
        ).pack(fill="x", pady=(0, 10))

        # Time selection
        ttk.Label(self.frame, text="Time to Take (HH:MM):").pack(anchor="w")

        # Time frame for hours and minutes
        time_frame = ttk.Frame(self.frame)
        time_frame.pack(fill="x", pady=(0, 10))

        # Hours
        self.hour_var = tk.StringVar(value="08")
        hour_spinbox = ttk.Spinbox(
            time_frame,
            from_=0,
            to=23,
            width=5,
            format="%02.0f",
            textvariable=self.hour_var
        )
        hour_spinbox.pack(side="left")

        ttk.Label(time_frame, text=":").pack(side="left", padx=5)

        # Minutes
        self.minute_var = tk.StringVar(value="00")
        minute_spinbox = ttk.Spinbox(
            time_frame,
            from_=0,
            to=59,
            width=5,
            format="%02.0f",
            textvariable=self.minute_var
        )
        minute_spinbox.pack(side="left")

        # Reminder toggle
        self.reminder_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(
            self.frame,
            text="Enable Reminders",
            variable=self.reminder_var
        ).pack(pady=20)

        # Add button
        ttk.Button(
            self.frame,
            text="Add Medication",
            command=self.submit
        ).pack(pady=20)

    def submit(self):
        # Validate inputs
        if not all([self.name_var.get(), self.dosage_var.get()]):
            messagebox.showerror("Error", "Please fill all required fields")
            return

        # Create time string
        time_str = f"{self.hour_var.get()}:{self.minute_var.get()}"

        # Create medication data
        medication_data = {
            'name': self.name_var.get(),
            'dosage': self.dosage_var.get(),
            'time': time_str,
            'reminders_enabled': self.reminder_var.get()
        }

        # Call callback with data
        self.callback(medication_data)

        # Show success message
        messagebox.showinfo("Success", "Medication added successfully!")

        # Close window
        self.window.destroy()

        
class LogHistory(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.current_date = datetime.now()
        self.view_mode = "Daily Log"  # Default view mode
        self.medications = {}  # Add this to store medications

        # Load medications data
        self.load_medications()

        # Create main container
        self.create_header()
        self.create_calendar_view()
        self.create_bottom_buttons()
    def refresh_data(self):
        self.load_medications()  # Reload medications data
        self.update_calendar_view()  # Update the display

    def load_medications(self):
        try:
            with open("medication_data.json", "r") as f:
                self.medications = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.medications = {}

    def create_header(self):
        # Header frame
        header_frame = ttk.Frame(self)
        header_frame.pack(fill="x", pady=10)

        # Back button
        back_btn = ttk.Button(
            header_frame, 
            text="← Back to Dashboard",
            command=lambda: self.controller.show_frame("Homepage")
        )
        back_btn.pack(side="left", padx=10)

        # Navigation frame
        nav_frame = ttk.Frame(header_frame)
        nav_frame.pack(side="top", fill="x", padx=10)

        # Previous button
        self.prev_btn = ttk.Button(
            nav_frame, 
            text="<",
            command=self.previous_date
        )
        self.prev_btn.pack(side="left", padx=5)

        # Date label
        self.date_label = ttk.Label(
            nav_frame,
            text=self.current_date.strftime("%B %d, %Y"),
            font=("Helvetica", 12, "bold")
        )
        self.date_label.pack(side="left", padx=20)

        # Next button
        self.next_btn = ttk.Button(
            nav_frame, 
            text=">",
            command=self.next_date
        )
        self.next_btn.pack(side="left", padx=5)

        # View mode dropdown
        self.view_var = tk.StringVar(value=self.view_mode)
        view_menu = ttk.OptionMenu(
            nav_frame,
            self.view_var,
            self.view_mode,
            "Daily Log", "Weekly Log", "Monthly Log",
            command=self.change_view_mode
        )
        view_menu.pack(side="right", padx=10)

    def create_calendar_view(self):
        self.calendar_frame = ttk.Frame(self)
        self.calendar_frame.pack(fill="both", expand=True, padx=10, pady=10)
        self.update_calendar_view()

    def create_bottom_buttons(self):
        bottom_frame = ttk.Frame(self)
        bottom_frame.pack(side="bottom", fill="x", pady=10)

        report_btn = ttk.Button(
            bottom_frame,
            text="Report Side Effects",
            command=self.show_side_effects_page
        )
        report_btn.pack(side="right", padx=10)

    def update_calendar_view(self):
        # Clear existing content
        for widget in self.calendar_frame.winfo_children():
            widget.destroy()

        # Header for medication list
        ttk.Label(
            self.calendar_frame,
            text="Medication",
            font=("Helvetica", 11, "bold")
        ).grid(row=0, column=0, padx=5, pady=5, sticky="w")

        ttk.Label(
            self.calendar_frame,
            text="Dosage",
            font=("Helvetica", 11, "bold")
        ).grid(row=0, column=1, padx=5, pady=5, sticky="w")

        # Display user's actual medications
        for i, (med_name, med_info) in enumerate(self.medications.items(), 1):
            ttk.Label(
                self.calendar_frame,
                text=med_name
            ).grid(row=i, column=0, padx=5, pady=2, sticky="w")

            ttk.Label(
                self.calendar_frame,
                text=f"{med_info.get('dosage', '')} - {med_info.get('time', '')}"
            ).grid(row=i, column=1, padx=5, pady=2, sticky="w")

    def previous_date(self):
        if self.view_mode == "Daily Log":
            self.current_date -= timedelta(days=1)
        elif self.view_mode == "Weekly Log":
            self.current_date -= timedelta(weeks=1)
        else:  # Monthly Log
            first_day = self.current_date.replace(day=1)
            self.current_date = first_day - timedelta(days=1)
        self.update_view()

    def next_date(self):
        if self.view_mode == "Daily Log":
            self.current_date += timedelta(days=1)
        elif self.view_mode == "Weekly Log":
            self.current_date += timedelta(weeks=1)
        else:  # Monthly Log
            self.current_date = (self.current_date.replace(day=1) + timedelta(days=32)).replace(day=1)
        self.update_view()

    def change_view_mode(self, mode):
        self.view_mode = mode
        self.update_view()

    def update_view(self):
        self.date_label.config(text=self.current_date.strftime("%B %d, %Y"))
        self.update_calendar_view()

    def show_side_effects_page(self):
        # Implement the side effects page navigation
        self.controller.show_frame("SideEffects")  # You'll need to create this page

class SideEffects(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.medications = {}

        # Main container
        self.main_frame = ttk.Frame(self, padding="20")
        self.main_frame.pack(fill="both", expand=True)

        # Header frame
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill="x", pady=(0, 20))

        # Back button
        back_btn = ttk.Button(
            header_frame,
            text="← Back to Log & History",
            command=lambda: controller.show_frame("LogHistory")
        )
        back_btn.pack(side="left")

        # Title
        ttk.Label(
            header_frame,
            text="Report Side Effects",
            font=("Helvetica", 16, "bold")
        ).pack(side="left", padx=20)

        # Form frame
        self.form_frame = ttk.Frame(self.main_frame)
        self.form_frame.pack(fill="both", expand=True)

        # Selected medication variable
        self.selected_med = tk.StringVar()

        # Medication selection label FIRST
        ttk.Label(
            self.form_frame,
            text="Select Medication:",
            font=("Helvetica", 11)
        ).pack(anchor="w", pady=(0, 5))

        # Create dropdown frame SECOND
        self.dropdown_frame = ttk.Frame(self.form_frame)
        self.dropdown_frame.pack(fill="x", pady=(0, 15))

        # Symptoms
        ttk.Label(
            self.form_frame,
            text="Symptoms:",
            font=("Helvetica", 11)
        ).pack(anchor="w", pady=(0, 5))

        self.symptoms_text = tk.Text(self.form_frame, height=3)
        self.symptoms_text.pack(fill="x", pady=(0, 15))

        # Severity
        ttk.Label(
            self.form_frame,
            text="Severity:",
            font=("Helvetica", 11)
        ).pack(anchor="w", pady=(0, 5))

        self.severity_var = tk.StringVar()
        severity_entry = ttk.Entry(
            self.form_frame,
            textvariable=self.severity_var
        )
        severity_entry.pack(fill="x", pady=(0, 15))

        # Additional Comments
        ttk.Label(
            self.form_frame,
            text="Additional Comments:",
            font=("Helvetica", 11)
        ).pack(anchor="w", pady=(0, 5))

        self.comments_text = tk.Text(self.form_frame, height=4)
        self.comments_text.pack(fill="x", pady=(0, 15))

        # Submit button
        submit_btn = ttk.Button(
            self.form_frame,
            text="Submit Report",
            command=self.submit_report
        )
        submit_btn.pack(pady=20)

    def refresh_data(self):
        # Load medications
        self.load_medications()

        # Clear the dropdown frame
        for widget in self.dropdown_frame.winfo_children():
            widget.destroy()

        # Create new dropdown with updated medications
        med_names = list(self.medications.keys())
        default_text = "Select a medication"

        # Reset selected_med
        self.selected_med.set(default_text)

        # Create new dropdown
        med_dropdown = ttk.OptionMenu(
            self.dropdown_frame,
            self.selected_med,
            default_text,
            *([default_text] + med_names)  # Add default text to options
        )
        med_dropdown.pack(fill="x")

    def load_medications(self):
        try:
            with open("medication_data.json", "r") as f:
                self.medications = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.medications = {}

    def submit_report(self):
        # Validate inputs
        if not self.selected_med.get() or self.selected_med.get() == "Select a medication":
            messagebox.showerror("Error", "Please select a medication")
            return

        if not self.symptoms_text.get("1.0", "end-1c").strip():
            messagebox.showerror("Error", "Please describe the symptoms")
            return

        if not self.severity_var.get().strip():
            messagebox.showerror("Error", "Please indicate the severity")
            return

        # Create report data
        report = {
            'medication': self.selected_med.get(),
            'symptoms': self.symptoms_text.get("1.0", "end-1c"),
            'severity': self.severity_var.get(),
            'comments': self.comments_text.get("1.0", "end-1c"),
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        # Save report
        try:
            # Load existing reports
            try:
                with open("side_effects_reports.json", "r") as f:
                    reports = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                reports = []

            # Add new report
            reports.append(report)

            # Save updated reports
            with open("side_effects_reports.json", "w") as f:
                json.dump(reports, f)

            # Show success message
            messagebox.showinfo("Success", "Side effects report submitted successfully!")

            # Return to dashboard
            self.controller.show_frame("Homepage")

        except Exception as e:
            messagebox.showerror("Error", f"Could not save report: {str(e)}")

class ReminderSystem:
    def __init__(self, parent):
        self.parent = parent
        self.medications = {}
        self.load_data()

        # Clear existing content
        for widget in self.parent.winfo_children():
            widget.destroy()

        # Main container
        self.main_frame = ttk.Frame(self.parent)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Header frame
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill="x", pady=(0, 20))

        # Back button
        back_btn = ttk.Button(
            header_frame,
            text="← Back to Dashboard",
            command=self.go_back
        )
        back_btn.pack(side="left")

        # Title
        ttk.Label(
            header_frame,
            text="Medication Reminders",
            font=("Helvetica", 16, "bold")
        ).pack(side="left", padx=20)

        # Create list frame
        self.list_frame = ttk.Frame(self.main_frame)
        self.list_frame.pack(fill="both", expand=True)

        # Create headers
        ttk.Label(
            self.list_frame,
            text="Medication",
            font=("Helvetica", 12, "bold")
        ).grid(row=0, column=0, padx=20, pady=(0, 10), sticky="w")

        ttk.Label(
            self.list_frame,
            text="Reminders",
            font=("Helvetica", 12, "bold")
        ).grid(row=0, column=1, padx=20, pady=(0, 10), sticky="w")

        # Display medications and their reminder toggles
        self.display_medications()

    def display_medications(self):
        # Load current medications
        try:
            with open("medication_data.json", "r") as f:
                self.medications = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.medications = {}

        # Display each medication with a toggle button
        for i, (med_name, med_info) in enumerate(self.medications.items(), 1):
            # Medication name
            ttk.Label(
                self.list_frame,
                text=med_name,
                font=("Helvetica", 11)
            ).grid(row=i, column=0, padx=20, pady=10, sticky="w")

            # Reminder toggle
            reminder_var = tk.BooleanVar(value=med_info.get('reminders_enabled', False))
            toggle = ttk.Checkbutton(
                self.list_frame,
                text="Enable",
                variable=reminder_var,
                command=lambda m=med_name, v=reminder_var: self.toggle_reminder(m, v)
            )
            toggle.grid(row=i, column=1, padx=20, pady=10, sticky="w")

    def toggle_reminder(self, medication_name, var):
        # Update reminder status in data
        self.medications[medication_name]['reminders_enabled'] = var.get()

        # Save changes
        try:
            with open("medication_data.json", "w") as f:
                json.dump(self.medications, f)

            # Show confirmation
            status = "enabled" if var.get() else "disabled"
            messagebox.showinfo(
                "Reminder Updated", 
                f"Reminders for {medication_name} have been {status}."
            )
        except Exception as e:
            messagebox.showerror(
                "Error",
                f"Could not save reminder settings: {str(e)}"
            )

    def load_data(self):
        try:
            with open("medication_data.json", "r") as f:
                self.medications = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.medications = {}
            


    def go_back(self):
        self.parent.destroy()  # This will close the reminders window and return to dashboard

# Add Reminder Dialog
class AddReminderDialog(tk.Toplevel):
    def __init__(self, parent, callback):
        super().__init__(parent)
        self.callback = callback
        self.title("Set Reminder")
        self.geometry("300x200")

        # Time selection
        ttk.Label(self, text="Select Time:").pack(pady=5)
        self.time_var = tk.StringVar()
        self.time_entry = ttk.Entry(self, textvariable=self.time_var)
        self.time_entry.pack(pady=5)
        ttk.Label(self, text="Format: HH:MM").pack()

        # Buttons
        ttk.Button(
            self, 
            text="Set Reminder",
            command=self.set_reminder
        ).pack(pady=20)

        ttk.Button(
            self, 
            text="Cancel",
            command=self.destroy
        ).pack()

    def set_reminder(self):
        time_str = self.time_var.get()
        try:
            # Validate time format
            datetime.strptime(time_str, "%H:%M")
            self.callback(time_str)
            self.destroy()
        except ValueError:
            messagebox.showerror("Error", "Invalid time format. Please use HH:MM")
    
        
if __name__ == "__main__":
    app = tkinterApp()
    app.mainloop()
