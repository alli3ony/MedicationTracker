import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime
import json

class MedicationTracker(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Medication Tracker")
        self.geometry("800x600")

        # Initialize data storage
        self.medications = {}
        self.load_data()

        # Create main container
        self.container = ttk.Frame(self)
        self.container.pack(fill="both", expand=True)

        # Create navigation
        self.create_navigation()

        # Create main content area
        self.content = ttk.Frame(self.container)
        self.content.pack(fill="both", expand=True, padx=10, pady=10)

        self.show_dashboard()

    def create_navigation(self):
        nav = ttk.Frame(self.container)
        nav.pack(fill="x", padx=5, pady=5)

        ttk.Button(nav, text="Dashboard", command=self.show_dashboard).pack(side="left", padx=5)
        ttk.Button(nav, text="Add Medication", command=self.show_add_medication).pack(side="left", padx=5)
        ttk.Button(nav, text="View History", command=self.show_history).pack(side="left", padx=5)

    def show_dashboard(self):
        # Clear current content
        for widget in self.content.winfo_children():
            widget.destroy()

        ttk.Label(self.content, text="Your Medications", font=("Helvetica", 16)).pack(pady=10)

        # Create medication list
        if self.medications:
            for med_name, med_info in self.medications.items():
                med_frame = ttk.Frame(self.content)
                med_frame.pack(fill="x", pady=5)

                ttk.Label(med_frame, text=f"{med_name} - {med_info['dosage']}").pack(side="left")
                ttk.Button(med_frame, text="Take", 
                          command=lambda m=med_name: self.log_medication(m)).pack(side="right")

    def show_add_medication(self):
        # Clear current content
        for widget in self.content.winfo_children():
            widget.destroy()

        ttk.Label(self.content, text="Add New Medication", font=("Helvetica", 16)).pack(pady=10)

        # Create form
        form = ttk.Frame(self.content)
        form.pack(pady=10)

        ttk.Label(form, text="Medication Name:").grid(row=0, column=0, pady=5)
        name_entry = ttk.Entry(form)
        name_entry.grid(row=0, column=1, pady=5)

        ttk.Label(form, text="Dosage:").grid(row=1, column=0, pady=5)
        dosage_entry = ttk.Entry(form)
        dosage_entry.grid(row=1, column=1, pady=5)

        def save_medication():
            name = name_entry.get()
            dosage = dosage_entry.get()

            if name and dosage:
                self.medications[name] = {
                    "dosage": dosage,
                    "created_date": datetime.now().strftime("%Y-%m-%d")
                }
                self.save_data()
                messagebox.showinfo("Success", "Medication added successfully!")
                self.show_dashboard()
            else:
                messagebox.showerror("Error", "Please fill all fields")

        ttk.Button(form, text="Save", command=save_medication).grid(row=2, column=0, columnspan=2, pady=10)

    def show_history(self):
        # Clear current content
        for widget in self.content.winfo_children():
            widget.destroy()

        ttk.Label(self.content, text="Medication History", font=("Helvetica", 16)).pack(pady=10)

        # Add history view implementation here

    def log_medication(self, medication_name):
        # Log when medication is taken
        if 'log' not in self.medications[medication_name]:
            self.medications[medication_name]['log'] = []

        self.medications[medication_name]['log'].append(
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )
        self.save_data()
        messagebox.showinfo("Success", f"{medication_name} logged successfully!")

    def save_data(self):
        try:
            with open("medication_data.json", "w") as f:
                json.dump(self.medications, f)
        except Exception as e:
            messagebox.showerror("Error", f"Could not save data: {str(e)}")

    def load_data(self):
        try:
            with open("medication_data.json", "r") as f:
                self.medications = json.load(f)
        except FileNotFoundError:
            self.medications = {}

class Login(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller

        self.configure(width=1000, height=1000)

        welcome = tk.Label(self, text='Welcome', font=('calibre', 30, 'bold'))

        # User input
        self.name_var = tk.StringVar()
        self.passw_var = tk.StringVar()

        # Creating labels and entries
        name_label = tk.Label(self, text='Username', font=('calibre', 10, 'bold'))
        name_entry = tk.Entry(self, textvariable=self.name_var, font=('calibre', 10, 'normal'))

        passw_label = tk.Label(self, text='Password', font=('calibre', 10, 'bold'))
        passw_entry = tk.Entry(self, textvariable=self.passw_var, font=('calibre', 10, 'normal'), show='*')

        # Login button
        sub_btn = tk.Button(self, text='Login', command=self.submit)

        # Placing widgets
        welcome.place(x=400, y=50)
        name_label.place(x=400, y=100)
        name_entry.place(x=400, y=120)
        passw_label.place(x=400, y=150)
        passw_entry.place(x=400, y=170)
        sub_btn.place(x=400, y=250)

        # Navigation buttons
        button1 = tk.Button(self, text="New User?",
                            command=lambda: controller.show_frame("CreateAcc"))
        button1.place(x=200, y=250)

        button2 = tk.Button(self, text="Forgot Password",
                            command=lambda: controller.show_frame("ResetPwd"))
        button2.place(x=600, y=250)

    def submit(self):
        name = self.name_var.get()
        password = self.passw_var.get()

        # Check if the username exists and the password matches
        if name in self.controller.user_data and self.controller.user_data[name]['password'] == password:
            print(f"Login successful for user: {name}")
            self.controller.set_current_user(name)
            self.controller.show_frame("Homepage")
        else:
            print("Invalid username or password")
            messagebox.showerror("Login Error", "Invalid username or password")

        self.name_var.set("")
        self.passw_var.set("")
    
class CreateAcc(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        self.username_var = tk.StringVar()
        self.password_var = tk.StringVar()
        self.confirm_password_var = tk.StringVar()

        # Username
        tk.Label(self, text="Username:").pack(pady=10)
        self.username_entry = tk.Entry(self, textvariable=self.username_var)
        self.username_entry.pack()

        # Password
        tk.Label(self, text="Password:").pack(pady=10)
        self.password_entry = tk.Entry(self, textvariable=self.password_var, show="*")
        self.password_entry.pack()

        # Confirm Password
        tk.Label(self, text="Confirm Password:").pack(pady=10)
        self.confirm_password_entry = tk.Entry(self, textvariable=self.confirm_password_var, show="*")
        self.confirm_password_entry.pack()

        # Create Account Button
        tk.Button(self, text="Create Account", command=self.create_account).pack(pady=20)

        # Back to Login Button
        tk.Button(self, text="Back to Login", command=lambda: controller.show_frame("Login")).pack()

    def create_account(self):
        username = self.username_var.get()
        password = self.password_var.get()
        confirm_password = self.confirm_password_var.get()

        if username and password and confirm_password:
            if password != confirm_password:
                messagebox.showerror("Error", "Passwords do not match")
            elif self.controller.add_user(username, password):
                self.controller.show_frame("SetSecurityQs")
            else:
                messagebox.showerror("Error", "Username already exists")
        else:
            messagebox.showerror("Error", "All fields must be filled")

        # Clear the entry fields
        self.username_var.set("")
        self.password_var.set("")
        self.confirm_password_var.set("")
        
        
if __name__ == "__main__":
    app = MedicationTracker()
    app.mainloop()
